{
  "hash": "261df249b1728f2cbec27cc31372dbf4",
  "result": {
    "markdown": "---\ntitle: \"Classification\"\nauthor: \"Jonathan West\"\ndate: \"2023-11-24\"\ncategories: [Classification, code]\ndescription: \"This is a blog post demonstrating the concept of classification in machine learning.\"\nformat:\n    html:\n        code-tools: true\n---\n\n## Introduction\nClassification is an important concept in machine learning.\nIt is used to predict the class of a given data point, or in other words assign an observation to a predefined group, based on the features of that observation.\nIn this blog post, we will jump into the concept of classification and how to carry it out on a dataset.\n\nIf you have followed along in other blog posts on this site, you will likely have seen the concepts of regression and clustering. Classification is similar to both of these concepts, but it differs in some major ways. The goal of regression is to predict continuous numerical values, whereas the goal of classification is to predict discrete values. However, they are both forms of supervised learning, where we have a set of labeled data to use to create our model, before applying it to new data.\nOn the other hand, clustering is a form of unsupervised learning, where we have a set of unlabeled data, and we are trying to find patterns in the data. Like clustering, classification entails finding patterns in the data and grouping similar data points together. However, we will be using predefined labeled groups rather than trying to find the groups ourselves.\n\nLet's load a dataset to conduct classification work on.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Load the penguins dataset from the seaborn library\nimport seaborn as sns\npenguins = sns.load_dataset(\"penguins\")\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>Male</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>Female</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>Female</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>Female</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprint(f\"Number of observations: {penguins.shape[0]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of observations: 344\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npenguins.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\nspecies               0\nisland                0\nbill_length_mm        2\nbill_depth_mm         2\nflipper_length_mm     2\nbody_mass_g           2\nsex                  11\ndtype: int64\n```\n:::\n:::\n\n\nAs shown above, there are some none-numerical values in the dataset, and there are some missing values. We will need to deal with these before we can carry out classification work on the dataset. Let's drop the rows that have missing values.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\npenguins = penguins.dropna()\npenguins.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\nspecies              0\nisland               0\nbill_length_mm       0\nbill_depth_mm        0\nflipper_length_mm    0\nbody_mass_g          0\nsex                  0\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint(f\"Number of observations: {penguins.shape[0]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of observations: 333\n```\n:::\n:::\n\n\nAs you can see, we have cut the number of observations from 344 to 333, and removed any rows with missing values. Now we will continue on with our classification work.\n\n## Types of classification\nThere are several different classification algorithms that we can use to classify our data. Some of the most common ones include linear classifiers, tree-based classifiers, and neural network classifiers. \nIn this blog post we will be trying two specific algorithms: support vector machines and random forests. We will be using the scikit-learn library to carry out our classification work.\n\nRandom forests are a type of tree-based classifier, which use multiple decision trees to classify data, which helps improve accuracy and reduce overfitting.\n\nSupport vector machines (SVM) are a type of linear classifier, which find a hyperplane that best separates data into different classes while maximizing the margin between the hyperplane and the data points. SVMs are a very popular classification algorithm, and they are used in both linear and non-linear classification problems. \nWe will start with support vector machines.\n\n## SVM classification\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\n# Replace categorical target variable with numerical values\nlabel_encoder = LabelEncoder()\npenguins[\"species_encoded\"] = label_encoder.fit_transform(penguins[\"species\"])\n\n# Obtain separate feature and target sets (X and y)\ny = penguins[\"species_encoded\"]\nX = penguins.drop([\"species\", \"species_encoded\"], axis=1)\n```\n:::\n\n\nAs you can see, we have done some basic preprocessing on the dataset, including converting the target variable to numberical values.\nNext we need to deal with the categorical variables in the dataset. We will use label encoding to convert the `sex` feature into numerical values, because this can simply be done for binary or naturally ordinal variables. \nHowever, the island variable is not binary nor does it follow a naturally ordinal state, so to keep it in without creating false relationships in the data we would likely want to use one-hot encoding.\nOne-hot encoding essentially entails creating a new binary column for each possible value of the categorical variable, and assigning a 1 or 0 to each observation depending on which value it has for that variable. \nHowever in this case we will simply drop the island variable from the dataset.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\npenguins[\"sex_encoded\"] = label_encoder.fit_transform(penguins[\"sex\"])\nX = penguins.drop([\"species\", \"species_encoded\", \"island\", \"sex\"], axis=1)\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex_encoded</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>39.3</td>\n      <td>20.6</td>\n      <td>190.0</td>\n      <td>3650.0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe have now finished our data preprocessing work, and splitting up our training and testing sets. \nNow we can create our SVM classifier and fit it to the training data.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Create an SVM classifier\nsvm_classifier = SVC(kernel='linear')\n\n# Fit the classifier on the training data\nsvm_classifier.fit(X_train, y_train)\n\n# Make predictions on the test data\ny_pred = svm_classifier.predict(X_test)\n\n# Evaluate performance\naccuracy = accuracy_score(y_test, y_pred)\nconf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"Accuracy:\", accuracy)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\nprint(classification_report(y_test, y_pred))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy: 0.9850746268656716\nConfusion Matrix:\n [[30  1  0]\n [ 0 13  0]\n [ 0  0 23]]\n              precision    recall  f1-score   support\n\n           0       1.00      0.97      0.98        31\n           1       0.93      1.00      0.96        13\n           2       1.00      1.00      1.00        23\n\n    accuracy                           0.99        67\n   macro avg       0.98      0.99      0.98        67\nweighted avg       0.99      0.99      0.99        67\n\n```\n:::\n:::\n\n\nAs we can see from the results above, our SVM classifier has an accuracy of 0.99, which is quite good.\nLet's help visualize the results by creating a confusion matrix.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nimport sklearn.metrics\nimport matplotlib.pyplot as plt\n\nconf_mat_display = sklearn.metrics.ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=penguins[\"species\"].unique())\nconf_mat_display.plot()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-1.png){width=551 height=434}\n:::\n:::\n\n\nAs we can see from the confusion matrix, our SVM classifier did a very good job of classifying the data, with only a single false positive. The model predicted a Chinstrap penguin as an Adelie penguin, but that was the only failure in the dataset. \n\nAlthough this worked quite well already, let's try another classification algorithm to see how the results compare. \n\n## Random forest classification\nAs mentioned before, we are going to apply a random forest classification to the data to see how it compares to the SVM classifier.\nRandom forest classification works by creating multiple decision trees, and then using the mode of the predictions of the individual trees as the final prediction.\nWe already did preprocessing on the data and split it into training and testing sets, so we can simply create a new classifier and fit it to the training data.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Create a Random Forest classifier\nrandom_forest_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n\n# Fit the classifier on the training data & make predictions\nrandom_forest_classifier.fit(X_train, y_train)\ny_pred = random_forest_classifier.predict(X_test)\n\n# Evaluate performance\naccuracy = accuracy_score(y_test, y_pred)\nconf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"Accuracy:\", accuracy)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\nprint(classification_report(y_test, y_pred))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy: 1.0\nConfusion Matrix:\n [[31  0  0]\n [ 0 13  0]\n [ 0  0 23]]\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        31\n           1       1.00      1.00      1.00        13\n           2       1.00      1.00      1.00        23\n\n    accuracy                           1.00        67\n   macro avg       1.00      1.00      1.00        67\nweighted avg       1.00      1.00      1.00        67\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nconf_mat_display = sklearn.metrics.ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=penguins[\"species\"].unique())\nconf_mat_display.plot()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){width=551 height=429}\n:::\n:::\n\n\nThis classifier also did a great job, even beating out the SVM in terms of accuracy. For this relatively simple dataset, random forest classifcation was able to achieve 100% accuracy on our testing data.\n\nLastly, lets create another visualization of the classification, this time visualizing the first three trees of our random forest classifier.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nfrom sklearn.tree import export_graphviz\nfrom IPython.display import Image\nimport graphviz\n\nfor i in range(3):\n    tree = random_forest_classifier.estimators_[i]\n    dot_data = export_graphviz(tree,\n                               feature_names=X_train.columns,  \n                               filled=True,  \n                               max_depth=2, \n                               impurity=False, \n                               proportion=True)\n    graph = graphviz.Source(dot_data)\n    display(graph)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-1.svg){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-2.svg){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-3.svg){}\n:::\n:::\n\n\nThese decision trees show how for a given feature, the tree splits the data into two groups based on the value of that feature, and narrows down the possible classes for each group. \nBy combining the results of multiple trees, random forest classification is able to achieve a more comprehensive classification than a single decision tree.\n\n# Conclusion\nIn this blog post, we delved into the concept of classification in machine learning.\nWe looked at the difference between classification and the concepts of regression and clustering, and we looked at some different types of classification. \nWe then worked on a real use case of classification algorithms. \nI hope that this blog post has been helpful in understanding classificaiton in machine learning, and encourages you to continue with your own work in this area.\n\n\n## Sources used\n1. https://github.com/ageron/handson-ml3/tree/main\n2. https://scikit-learn.org/stable/modules/generated/sklearn.metrics.ConfusionMatrixDisplay.html\n3. https://www.datacamp.com/tutorial/svm-classification-scikit-learn-python\n4. https://www.datacamp.com/tutorial/random-forests-classifier-python\n5. https://www.geeksforgeeks.org/random-forest-classifier-using-scikit-learn/\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}